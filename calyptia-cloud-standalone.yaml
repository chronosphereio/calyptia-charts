---
# Source: calyptia-standalone/templates/cloud/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/name: calyptia-standalone
    helm.sh/chart: calyptia-standalone-0.1.0
    app.kubernetes.io/instance: calyptia-cloud-standalone
    app.kubernetes.io/managed-by: Helm
  name: calyptia-cloud-standalone-calyptia-standalone-cloud
  namespace: "calyptia"
---
# Source: calyptia-standalone/templates/frontend/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/name: calyptia-standalone
    helm.sh/chart: calyptia-standalone-0.1.0
    app.kubernetes.io/instance: calyptia-cloud-standalone
    app.kubernetes.io/managed-by: Helm
  name: calyptia-cloud-standalone-calyptia-standalone-frontend
  namespace: "calyptia"
---
# Source: calyptia-standalone/templates/cloud/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: calyptia-write-role
  namespace: "calyptia"
rules:
  - apiGroups: [""] # core API group
    resources: ["pods", "secrets"]
    verbs: ["get", "watch", "list", "create", "update"]
---
# Source: calyptia-standalone/templates/frontend/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: calyptia-read-role
  namespace: "calyptia"
rules:
  - apiGroups: [""] # core API group
    resources: ["pods", "secrets"]
    verbs: ["get", "watch", "list"]
---
# Source: calyptia-standalone/templates/cloud/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: calyptia-write-binding
  namespace: "calyptia"
subjects:
  - kind: ServiceAccount
    name: calyptia-cloud-standalone-calyptia-standalone-cloud
    namespace: "calyptia"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: calyptia-write-role
---
# Source: calyptia-standalone/templates/frontend/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: calyptia-read-binding
  namespace: "calyptia"
subjects:
  - kind: ServiceAccount
    name: calyptia-cloud-standalone-calyptia-standalone-frontend
    namespace: "calyptia"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: calyptia-read-role
---
# Source: calyptia-standalone/templates/cloud/service-cloud.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: calyptia-standalone
    helm.sh/chart: calyptia-standalone-0.1.0
    app.kubernetes.io/instance: calyptia-cloud-standalone
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: cloud-api
  name: cloud-api
  namespace: "calyptia"
spec:
  type: LoadBalancer
  ports:
    - name: "cloud-api"
      port: 5000
      targetPort: 5000
  selector:
    app.kubernetes.io/name: calyptia-standalone
    helm.sh/chart: calyptia-standalone-0.1.0
    app.kubernetes.io/instance: calyptia-cloud-standalone
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: cloud-api
---
# Source: calyptia-standalone/templates/cloud/service-influxdb.yaml
apiVersion: v1
kind: Service
metadata:
  annotations:
    app.kubernetes.io/name: cloud
    app.kubernetes.io/instance: calyptia
  labels:
    app.kubernetes.io/component: influxdb
  name: influxdb
  namespace: "calyptia"
spec:
  type: ClusterIP
  ports:
    - name: influxdb
      port: 8086
      targetPort: 8086
  selector:
    app.kubernetes.io/name: calyptia-standalone
    helm.sh/chart: calyptia-standalone-0.1.0
    app.kubernetes.io/instance: calyptia-cloud-standalone
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: influxdb
---
# Source: calyptia-standalone/templates/cloud/service-postgres.yaml
apiVersion: v1
kind: Service
metadata:
  annotations:
    app.kubernetes.io/name: cloud
    app.kubernetes.io/instance: calyptia
  labels:
    app.kubernetes.io/component: postgres
  name: postgres
  namespace: "calyptia"
spec:
  type: ClusterIP
  ports:
    - name: postgres
      port: 5432
      targetPort: 5432
  selector:
    app.kubernetes.io/name: calyptia-standalone
    helm.sh/chart: calyptia-standalone-0.1.0
    app.kubernetes.io/instance: calyptia-cloud-standalone
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: postgres
---
# Source: calyptia-standalone/templates/frontend/service-core-ui.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: calyptia-standalone
    helm.sh/chart: calyptia-standalone-0.1.0
    app.kubernetes.io/instance: calyptia-cloud-standalone
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: core
  name: core
  namespace: "calyptia"
spec:
  type: LoadBalancer
  ports:
    - name: ui
      port: 3000
      targetPort: 3000
  selector:
    app.kubernetes.io/name: calyptia-standalone
    helm.sh/chart: calyptia-standalone-0.1.0
    app.kubernetes.io/instance: calyptia-cloud-standalone
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: core
---
# Source: calyptia-standalone/templates/frontend/service-luasandbox.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: calyptia-standalone
    helm.sh/chart: calyptia-standalone-0.1.0
    app.kubernetes.io/instance: calyptia-cloud-standalone
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: cloud-lua-sandbox
  name: cloud-lua-sandbox
  namespace: "calyptia"
spec:
  type: ClusterIP
  ports:
    - name: cloud-lua-sandbox
      port: 5555
      targetPort: 5555
  selector:
    app.kubernetes.io/name: calyptia-standalone
    helm.sh/chart: calyptia-standalone-0.1.0
    app.kubernetes.io/instance: calyptia-cloud-standalone
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: cloud-lua-sandbox
---
# Source: calyptia-standalone/templates/vivo/service-vivo.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: calyptia-standalone
    helm.sh/chart: calyptia-standalone-0.1.0
    app.kubernetes.io/instance: calyptia-cloud-standalone
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: vivo
    calyptia.vivo.input.http: '9010'
    calyptia.vivo.input.forward: '9000'
  name: vivo
  namespace: "calyptia"
spec:
  type: LoadBalancer
  ports:
    - name: "ui"
      port: 3000
      targetPort: 3000
    - name: "forward"
      port: 9000
      targetPort: 24224
    - name: "http"
      port: 9010
      targetPort: 9880
    - name: "vivo"
      port: 2025
      targetPort: 2025
    - name: "fluent-bit"
      port: 2020
      targetPort: 2020
  selector:
    app.kubernetes.io/name: calyptia-standalone
    helm.sh/chart: calyptia-standalone-0.1.0
    app.kubernetes.io/instance: calyptia-cloud-standalone
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: vivo
---
# Source: calyptia-standalone/templates/cloud/deployment-cloud.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: calyptia-standalone
    helm.sh/chart: calyptia-standalone-0.1.0
    app.kubernetes.io/instance: calyptia-cloud-standalone
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: cloud-api
  name: cloud-api
  namespace: "calyptia"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: calyptia-standalone
      app.kubernetes.io/instance: calyptia-cloud-standalone
      app.kubernetes.io/component: cloud-api
  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/name: calyptia-standalone
        helm.sh/chart: calyptia-standalone-0.1.0
        app.kubernetes.io/instance: calyptia-cloud-standalone
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: cloud-api
    spec:
      serviceAccount: calyptia-cloud-standalone-calyptia-standalone-cloud
      
      imagePullSecrets:
        - name: regcreds
      containers:
        - image: ghcr.io/calyptia/cloud:1.4.1
          imagePullPolicy: "IfNotPresent"
          name: cloud-api
          ports:
            - name: http
              containerPort: 5000
          resources:
            limits:
              cpu: 500m
              memory: 500Mi
            requests: {}
          env:
            - name: DEBUG
              value: 'true'
            - name: INFLUX_SERVER
              value: "http://influxdb:8086"
            - name: POSTGRES_DSN
              value: "postgresql://postgres@postgres:5432?sslmode=disable"
            # - name: ALLOWED_ORIGINS
            #   # value: "https://config-viewer-ui-dev.herokuapp.com,https://visual-ui.herokuapp.com,https://cloud-api.calyptia.com,https://core-jet.vercel.app,https://core-git-*-calyptia.vercel.app"
            #   value: "*"
            # Cross-mount a token file
            - name: DEFAULT_TOKEN_FILE
              value: /token/token.txt
          volumeMounts:
            - mountPath: /token
              name: token
        - name: token-secret-creator
          image: docker.io/bitnami/kubectl:1.25.12
          imagePullPolicy: "IfNotPresent"
          # Need access to the filesystem - cloud runs as root
          securityContext:
            runAsUser: 0
          resources:
            limits: {}
            requests: {}
          command: ["/bin/bash"]
          args:
            - "-c"
            - |
              until [[ -f /token/token.txt ]]; do
                sleep 5
              done
              echo 'Token file found'
              until kubectl create -n ${CORE_NAMESPACE} secret generic auth-secret --from-file=ONPREM_CLOUD_API_PROJECT_TOKEN=/token/token.txt ; do
                sleep 10
              done
              echo 'Secret created - complete'
              while true; do
                sleep 30
              done
          env:
            - name: CORE_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          volumeMounts:
            - name: token
              mountPath: /token
      volumes:
        - name: token
          emptyDir:
            sizeLimit: 1Mi
      restartPolicy: Always
---
# Source: calyptia-standalone/templates/cloud/deployment-influxdb.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: calyptia-standalone
    helm.sh/chart: calyptia-standalone-0.1.0
    app.kubernetes.io/instance: calyptia-cloud-standalone
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: influxdb
  name: influxdb
  namespace: "calyptia"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: calyptia-standalone
      app.kubernetes.io/instance: calyptia-cloud-standalone
      app.kubernetes.io/component: influxdb
  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/name: calyptia-standalone
        helm.sh/chart: calyptia-standalone-0.1.0
        app.kubernetes.io/instance: calyptia-cloud-standalone
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: influxdb
    spec:
      
      imagePullSecrets:
        - name: regcreds
      containers:
        - env:
            - name: DOCKER_INFLUXDB_INIT_ADMIN_TOKEN
              value: cloud-api
            - name: DOCKER_INFLUXDB_INIT_BUCKET
              value: cloud-api
            - name: DOCKER_INFLUXDB_INIT_MODE
              value: setup
            - name: DOCKER_INFLUXDB_INIT_ORG
              value: cloud-api
            - name: DOCKER_INFLUXDB_INIT_PASSWORD
              value: my-password
            - name: DOCKER_INFLUXDB_INIT_USERNAME
              value: my-user
          image: docker.io/influxdb:2.7.1
          imagePullPolicy: "IfNotPresent"
          name: influxdb
          ports:
            - containerPort: 8086
          resources:
            limits:
              cpu: 500m
              memory: 500Mi
            requests: {}
          volumeMounts:
      volumes:
      restartPolicy: Always
---
# Source: calyptia-standalone/templates/cloud/deployment-postgres.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: calyptia-standalone
    helm.sh/chart: calyptia-standalone-0.1.0
    app.kubernetes.io/instance: calyptia-cloud-standalone
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: postgres
  name: postgres
  namespace: "calyptia"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: calyptia-standalone
      app.kubernetes.io/instance: calyptia-cloud-standalone
      app.kubernetes.io/component: postgres
  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/name: calyptia-standalone
        helm.sh/chart: calyptia-standalone-0.1.0
        app.kubernetes.io/instance: calyptia-cloud-standalone
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: postgres
    spec:
      
      imagePullSecrets:
        - name: regcreds
      containers:
        - env:
            - name: POSTGRES_HOST_AUTH_METHOD
              value: trust
          image: docker.io/postgres:15.3
          imagePullPolicy: "IfNotPresent"
          name: postgres
          ports:
            - containerPort: 5432
          resources:
            limits:
              cpu: 500m
              memory: 500Mi
            requests: {}
          volumeMounts:
      volumes:
      restartPolicy: Always
---
# Source: calyptia-standalone/templates/frontend/deployment-core-ui.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: calyptia-standalone
    helm.sh/chart: calyptia-standalone-0.1.0
    app.kubernetes.io/instance: calyptia-cloud-standalone
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: core
  name: core
  namespace: "calyptia"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: calyptia-standalone
      app.kubernetes.io/instance: calyptia-cloud-standalone
      app.kubernetes.io/component: core
  template:
    metadata:
      labels:
        app.kubernetes.io/name: calyptia-standalone
        helm.sh/chart: calyptia-standalone-0.1.0
        app.kubernetes.io/instance: calyptia-cloud-standalone
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: core
    spec:
      serviceAccount: calyptia-cloud-standalone-calyptia-standalone-frontend
      
      imagePullSecrets:
        - name: regcreds
      initContainers:
        # Wait for the auth-secret to be created before continuing
        - name: token-secret-waiter
          image: docker.io/bitnami/kubectl:1.25.12
          imagePullPolicy: "IfNotPresent"
          resources:
            limits: {}
            requests: {}
          command: ["/bin/bash"]
          args:
            - "-c"
            - |
              until kubectl get secret -n ${CORE_NAMESPACE} auth-secret; do
                sleep 30
              done
          env:
            - name: CORE_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
      containers:
        - image: ghcr.io/calyptia/frontend:1.0.3
          imagePullPolicy: "IfNotPresent"
          name: core
          ports:
            - name: http
              containerPort: 3000
          env:
            # The in-cluster 'cloud' service
            - name: CLOUD_API_URL
              value: http://cloud-api:5000
            - name: NEXT_PUBLIC_CLI_INSTRUCTIONS_URL_OVERRIDE
              value: http://cloud-api:5000
              # The in-cluster LUA sandbox service
            - name: LUA_SANDBOX_URL
              value: http://cloud-lua-sandbox:5555/jsonrpc
            # Disable various components we do not want - the container should anyway.
            - name: SENTRY_IGNORE_API_RESOLUTION_ERROR
              value: '1'
            - name: SENTRY_ENVIRONMENT
              value: 'offline'
            - name: SENTRY_DISABLED
              value: '1'
            - name: NEXT_TELEMETRY_DISABLED
              value: '1'
          envFrom:
            - secretRef:
                name: auth-secret
          resources:
            limits:
              cpu: 500m
              memory: 500Mi
            requests: {}
          volumeMounts:
      volumes:
      restartPolicy: Always
---
# Source: calyptia-standalone/templates/frontend/deployment-luasandbox.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: calyptia-standalone
    helm.sh/chart: calyptia-standalone-0.1.0
    app.kubernetes.io/instance: calyptia-cloud-standalone
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: cloud-lua-sandbox
  name: cloud-lua-sandbox
  namespace: "calyptia"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: calyptia-standalone
      app.kubernetes.io/instance: calyptia-cloud-standalone
      app.kubernetes.io/component: cloud-lua-sandbox
  template:
    metadata:
      labels:
        app.kubernetes.io/name: calyptia-standalone
        helm.sh/chart: calyptia-standalone-0.1.0
        app.kubernetes.io/instance: calyptia-cloud-standalone
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: cloud-lua-sandbox
    spec:
      
      imagePullSecrets:
        - name: regcreds
      containers:
        - image: ghcr.io/calyptia/cloud-lua-sandbox:2.1.5
          name: cloud-lua-sandbox
          ports:
            - containerPort: 5555
          resources:
            limits:
              cpu: 500m
              memory: 500Mi
            requests: {}
          imagePullPolicy: "IfNotPresent"
      restartPolicy: Always
---
# Source: calyptia-standalone/templates/vivo/deployment-vivo.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: calyptia-standalone
    helm.sh/chart: calyptia-standalone-0.1.0
    app.kubernetes.io/instance: calyptia-cloud-standalone
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: vivo
  name: vivo
  namespace: "calyptia"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: calyptia-standalone
      app.kubernetes.io/instance: calyptia-cloud-standalone
      app.kubernetes.io/component: vivo
  template:
    metadata:
      labels:
        app.kubernetes.io/name: calyptia-standalone
        helm.sh/chart: calyptia-standalone-0.1.0
        app.kubernetes.io/instance: calyptia-cloud-standalone
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: vivo
    spec:
      
      imagePullSecrets:
        - name: regcreds
      containers:
        - image: docker.io/calyptia/vivo:3.0.1
          name: vivo
          ports:
            - name: forward
              containerPort: 24224
            - name: http
              containerPort: 9880
            - name: vivo
              containerPort: 2025
            - name: fluent-bit
              containerPort: 2020
            - name: ui
              containerPort: 3000
          readinessProbe:
            httpGet:
              path: /api/v1/health
              port: fluent-bit
            failureThreshold: 3
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /api/v1/health
              port: fluent-bit
            failureThreshold: 5
            periodSeconds: 5
          resources:
            limits:
              cpu: 500m
              memory: 128Mi
            requests:
              cpu: 250m
              memory: 64Mi
          imagePullPolicy: "IfNotPresent"
      restartPolicy: Always
