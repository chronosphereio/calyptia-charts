---
# Source: calyptia-standalone/charts/core-operator/templates/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/name: core-operator
    helm.sh/chart: core-operator-1.0.2
    app.kubernetes.io/instance: calyptia-cloud-standalone
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "v2.0.6"
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: operator
    app.kubernetes.io/instance: controller-manager
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: serviceaccount
    app.kubernetes.io/part-of: operator
    calyptia.core: core-operator
  name: calyptia-cloud-standalone-core-operator-calyptia-core-operator
  namespace: "calyptia"
---
# Source: calyptia-standalone/charts/monitoring-aggregator/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: calyptia-cloud-standalone-monitoring-aggregator
  namespace: calyptia
  labels:
    helm.sh/chart: monitoring-aggregator-0.39.0
    app.kubernetes.io/name: monitoring-aggregator
    app.kubernetes.io/instance: calyptia-cloud-standalone
    app.kubernetes.io/version: "2.1.10"
    app.kubernetes.io/managed-by: Helm
---
# Source: calyptia-standalone/charts/monitoring-daemonset/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: calyptia-cloud-standalone-monitoring-daemonset
  namespace: calyptia
  labels:
    helm.sh/chart: monitoring-daemonset-0.39.0
    app.kubernetes.io/name: monitoring-daemonset
    app.kubernetes.io/instance: calyptia-cloud-standalone
    app.kubernetes.io/version: "2.1.10"
    app.kubernetes.io/managed-by: Helm
---
# Source: calyptia-standalone/templates/cloud/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/name: calyptia-standalone
    helm.sh/chart: calyptia-standalone-1.0.2
    app.kubernetes.io/instance: calyptia-cloud-standalone
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "v1.5.8"
  name: calyptia-cloud-standalone-calyptia-standalone-cloud
  namespace: "calyptia"
---
# Source: calyptia-standalone/templates/frontend/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/name: calyptia-standalone
    helm.sh/chart: calyptia-standalone-1.0.2
    app.kubernetes.io/instance: calyptia-cloud-standalone
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "v1.5.8"
  name: calyptia-cloud-standalone-calyptia-standalone-frontend
  namespace: "calyptia"
---
# Source: calyptia-standalone/templates/reloader/service-account.yaml
# https://github.com/stakater/Reloader/blob/master/deployments/kubernetes/manifests/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/name: calyptia-standalone
    helm.sh/chart: calyptia-standalone-1.0.2
    app.kubernetes.io/instance: calyptia-cloud-standalone
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "v1.5.8"
  name: calyptia-cloud-standalone-calyptia-standalone-reloader
  namespace: "calyptia"
---
# Source: calyptia-standalone/templates/monitoring/configmap-daemonset.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/name: calyptia-standalone
    helm.sh/chart: calyptia-standalone-1.0.2
    app.kubernetes.io/instance: calyptia-cloud-standalone
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "v1.5.8"
    app.kubernetes.io/component: monitoring
  name: monitoring-daemonset
  namespace: "calyptia"
data:
    fluent-bit.conf: |-
        [SERVICE]
            Daemon              Off
            Flush               1
            Log_Level           info
            Parsers_File        /fluent-bit/etc/parsers.conf
            Parsers_File        /fluent-bit/etc/conf/custom_parsers.conf
            HTTP_Server         On
            HTTP_Listen         0.0.0.0
            HTTP_Port           2020
            Health_Check        On
            Storage.Metrics     On

        [INPUT]
            Name                tail
            Path                /var/log/containers/*.log
            multiline.parser    docker, cri
            Tag                 kube.*
            Mem_Buf_Limit       5MB
            Skip_Long_Lines     On
            Skip_Empty_Lines    On
            # Ensure we do not tail our own logs otherwise it can snowball even with exclusion later
            Exclude_Path        /var/log/containers/*${POD_NAME}*.log
            Path_Key            filename

        [INPUT]
            Name                systemd
            Tag                 host.*
            Systemd_Filter      _SYSTEMD_UNIT=kubelet.service
            Read_From_Tail      On

        [INPUT]
            name                fluentbit_metrics
            tag                 metrics.calyptia
            scrape_on_start     true
            scrape_interval     30

        [INPUT]
            name                node_exporter_metrics
            tag                 metrics.node
            scrape_interval     30
            # Ensure these are mounted
            path.procfs         /host/proc
            path.sysfs          /host/sys

        [FILTER]
            Name                kubernetes
            Match               kube.*
            Merge_Log           On
            Keep_Log            Off
            K8S-Logging.Parser  On
            K8S-Logging.Exclude On

        [OUTPUT]
            name                stdout
            match               *

        [OUTPUT]
            name                prometheus_exporter
            match               metrics.*
            host                0.0.0.0
            port                2021
            add_label           node ${NODE_NAME}

        # The following may not be present
        [OUTPUT]
            name                forward
            host                vivo
            port                9000
            match               *
---
# Source: calyptia-standalone/templates/monitoring/configmap-deployment.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/name: calyptia-standalone
    helm.sh/chart: calyptia-standalone-1.0.2
    app.kubernetes.io/instance: calyptia-cloud-standalone
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "v1.5.8"
    app.kubernetes.io/component: monitoring
  name: monitoring-aggregator
  namespace: "calyptia"
data:
    fluent-bit.conf: |-
        [SERVICE]
            Daemon              Off
            Flush               1
            Log_Level           info
            Parsers_File        /fluent-bit/etc/parsers.conf
            Parsers_File        /fluent-bit/etc/conf/custom_parsers.conf
            HTTP_Server         On
            HTTP_Listen         0.0.0.0
            HTTP_Port           2020
            Health_Check        On
            Storage.Metrics     On

        [INPUT]
            name                fluentbit_metrics
            tag                 metrics.calyptia
            scrape_on_start     true
            scrape_interval     30

        # These will give us duplicate metrics for each image run from the daemonset
        [INPUT]
            name                prometheus_scrape
            tag                 metrics.cloud-api
            host                cloud-api.calyptia
            port                5000
            metrics_path        /prometheus_metrics
            scrape_interval     30s

        [INPUT]
            name                prometheus_scrape
            tag                 metrics.vivo
            host                vivo.calyptia
            port                2020
            metrics_path        /api/v2/metrics/prometheus
            scrape_interval     30s

        [INPUT]
            name                prometheus_scrape
            tag                 metrics.reloader
            host                reloader.calyptia
            port                9090
            metrics_path        /metrics
            scrape_interval     30s

        [INPUT]
            name                prometheus_scrape
            tag                 metrics.operator
            host                calyptia-core-controller-manager-metrics-service.calyptia
            port                8443
            metrics_path        /metrics
            scrape_interval     30s

        [OUTPUT]
            name                prometheus_exporter
            match               metrics.*
            host                0.0.0.0
            port                2021

        # The following may not be present
        [OUTPUT]
            name                forward
            host                vivo
            port                9000
            match               *
---
# Source: calyptia-standalone/charts/core-operator/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/name: core-operator
    helm.sh/chart: core-operator-1.0.2
    app.kubernetes.io/instance: calyptia-cloud-standalone
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "v2.0.6"
    calyptia.core: core-operator
  name: calyptia-core-manager-role
rules:
- apiGroups:
  - ""
  - apps
  - batch
  - policy
  - core.calyptia.com
  - core
  - rbac.authorization.k8s.io
  resources:
  - namespaces
  - serviceaccounts
  - deployments
  - clusterrolebindings
  - daemonsets
  - replicasets
  - pods
  - services
  - configmaps
  - deployments/scale
  - secrets
  - nodes/proxy
  - nodes
  - jobs
  - podsecuritypolicies
  - pipelines
  - pipelines/finalizers
  - pipelines/status
  verbs:
  - get
  - list
  - create
  - delete
  - patch
  - update
  - watch
  - deletecollection
  - use
---
# Source: calyptia-standalone/charts/core-operator/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/name: core-operator
    helm.sh/chart: core-operator-1.0.2
    app.kubernetes.io/instance: calyptia-cloud-standalone
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "v2.0.6"
    app.kubernetes.io/component: kube-rbac-proxy
    app.kubernetes.io/created-by: operator
    app.kubernetes.io/instance: metrics-reader
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: clusterrole
    app.kubernetes.io/part-of: operator
    calyptia.core: core-operator
  name: calyptia-core-metrics-reader
rules:
- nonResourceURLs:
  - /metrics
  verbs:
  - get
---
# Source: calyptia-standalone/charts/core-operator/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/name: core-operator
    helm.sh/chart: core-operator-1.0.2
    app.kubernetes.io/instance: calyptia-cloud-standalone
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "v2.0.6"
    calyptia.core: core-operator
  name: calyptia-core-pod-role
rules:
- apiGroups:
  - ""
  - apps
  - batch
  - policy
  - core.calyptia.com
  resources:
  - namespaces
  - deployments
  - daemonsets
  - replicasets
  - pods
  - services
  - configmaps
  - deployments/scale
  - secrets
  - nodes/proxy
  - nodes
  - jobs
  - podsecuritypolicies
  - pipelines
  - pipelines/finalizers
  - pipelines/status
  verbs:
  - get
  - list
  - create
  - delete
  - patch
  - update
  - watch
  - deletecollection
  - use
---
# Source: calyptia-standalone/charts/core-operator/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/name: core-operator
    helm.sh/chart: core-operator-1.0.2
    app.kubernetes.io/instance: calyptia-cloud-standalone
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "v2.0.6"
    app.kubernetes.io/component: kube-rbac-proxy
    app.kubernetes.io/created-by: operator
    app.kubernetes.io/instance: proxy-role
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: clusterrole
    app.kubernetes.io/part-of: operator
    calyptia.core: core-operator
  name: calyptia-core-proxy-role
rules:
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
---
# Source: calyptia-standalone/charts/monitoring-aggregator/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: calyptia-cloud-standalone-monitoring-aggregator
  labels:
    helm.sh/chart: monitoring-aggregator-0.39.0
    app.kubernetes.io/name: monitoring-aggregator
    app.kubernetes.io/instance: calyptia-cloud-standalone
    app.kubernetes.io/version: "2.1.10"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - ""
    resources:
      - namespaces
      - pods
    verbs:
      - get
      - list
      - watch
---
# Source: calyptia-standalone/charts/monitoring-daemonset/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: calyptia-cloud-standalone-monitoring-daemonset
  labels:
    helm.sh/chart: monitoring-daemonset-0.39.0
    app.kubernetes.io/name: monitoring-daemonset
    app.kubernetes.io/instance: calyptia-cloud-standalone
    app.kubernetes.io/version: "2.1.10"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - ""
    resources:
      - namespaces
      - pods
    verbs:
      - get
      - list
      - watch
---
# Source: calyptia-standalone/charts/core-operator/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/name: core-operator
    helm.sh/chart: core-operator-1.0.2
    app.kubernetes.io/instance: calyptia-cloud-standalone
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "v2.0.6"
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: operator
    app.kubernetes.io/instance: manager-rolebinding
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: clusterrolebinding
    app.kubernetes.io/part-of: operator
    calyptia.core: core-operator
  name: calyptia-core-manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: calyptia-core-manager-role
subjects:
- kind: ServiceAccount
  name: calyptia-cloud-standalone-core-operator-calyptia-core-operator
  namespace: calyptia
---
# Source: calyptia-standalone/charts/core-operator/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/name: core-operator
    helm.sh/chart: core-operator-1.0.2
    app.kubernetes.io/instance: calyptia-cloud-standalone
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "v2.0.6"
    app.kubernetes.io/component: kube-rbac-proxy
    app.kubernetes.io/created-by: operator
    app.kubernetes.io/instance: proxy-rolebinding
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: clusterrolebinding
    app.kubernetes.io/part-of: operator
    calyptia.core: core-operator
  name: calyptia-core-proxy-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: calyptia-core-proxy-role
subjects:
- kind: ServiceAccount
  name: calyptia-cloud-standalone-core-operator-calyptia-core-operator
  namespace: calyptia
---
# Source: calyptia-standalone/charts/monitoring-aggregator/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: calyptia-cloud-standalone-monitoring-aggregator
  labels:
    helm.sh/chart: monitoring-aggregator-0.39.0
    app.kubernetes.io/name: monitoring-aggregator
    app.kubernetes.io/instance: calyptia-cloud-standalone
    app.kubernetes.io/version: "2.1.10"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: calyptia-cloud-standalone-monitoring-aggregator
subjects:
  - kind: ServiceAccount
    name: calyptia-cloud-standalone-monitoring-aggregator
    namespace: calyptia
---
# Source: calyptia-standalone/charts/monitoring-daemonset/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: calyptia-cloud-standalone-monitoring-daemonset
  labels:
    helm.sh/chart: monitoring-daemonset-0.39.0
    app.kubernetes.io/name: monitoring-daemonset
    app.kubernetes.io/instance: calyptia-cloud-standalone
    app.kubernetes.io/version: "2.1.10"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: calyptia-cloud-standalone-monitoring-daemonset
subjects:
  - kind: ServiceAccount
    name: calyptia-cloud-standalone-monitoring-daemonset
    namespace: calyptia
---
# Source: calyptia-standalone/templates/cloud/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: calyptia-write-role
  namespace: "calyptia"
rules:
  - apiGroups: [""] # core API group
    resources: ["pods", "secrets"]
    verbs: ["get", "watch", "list", "create", "update", "delete"]
---
# Source: calyptia-standalone/templates/frontend/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: calyptia-read-role
  namespace: "calyptia"
rules:
  - apiGroups: [""] # core API group
    resources: ["pods", "secrets"]
    verbs: ["get", "watch", "list"]
---
# Source: calyptia-standalone/templates/reloader/rbac.yaml
# https://github.com/stakater/Reloader/blob/master/deployments/kubernetes/manifests/clusterrole.yaml
# https://github.com/stakater/Reloader/blob/master/deployments/kubernetes/manifests/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: reloader-reloader-role
  namespace: "calyptia"
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
      - configmaps
    verbs:
      - list
      - get
      - watch
  - apiGroups:
      - "apps"
    resources:
      - deployments
      - daemonsets
      - statefulsets
    verbs:
      - list
      - get
      - update
      - patch
  - apiGroups:
      - "extensions"
    resources:
      - deployments
      - daemonsets
    verbs:
      - list
      - get
      - update
      - patch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
---
# Source: calyptia-standalone/templates/cloud/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: calyptia-write-binding
  namespace: "calyptia"
subjects:
  - kind: ServiceAccount
    name: calyptia-cloud-standalone-calyptia-standalone-cloud
    namespace: "calyptia"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: calyptia-write-role
---
# Source: calyptia-standalone/templates/frontend/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: calyptia-read-binding
  namespace: "calyptia"
subjects:
  - kind: ServiceAccount
    name: calyptia-cloud-standalone-calyptia-standalone-frontend
    namespace: "calyptia"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: calyptia-read-role
---
# Source: calyptia-standalone/templates/reloader/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: reloader-reloader-role-binding
  namespace: "calyptia"
subjects:
  - kind: ServiceAccount
    name: calyptia-cloud-standalone-calyptia-standalone-reloader
    namespace: "calyptia"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: reloader-reloader-role
---
# Source: calyptia-standalone/charts/core-operator/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/path: "/metrics"
    prometheus.io/port: http
    prometheus.io/scrape: "true"
  labels:
    app.kubernetes.io/name: core-operator
    helm.sh/chart: core-operator-1.0.2
    app.kubernetes.io/instance: calyptia-cloud-standalone
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "v2.0.6"
    app.kubernetes.io/component: kube-rbac-proxy
    app.kubernetes.io/created-by: operator
    app.kubernetes.io/instance: controller-manager-metrics-service
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: service
    app.kubernetes.io/part-of: operator
    calyptia.core: core-operator
    control-plane: controller-manager
  name: calyptia-core-controller-manager-metrics-service
  namespace: calyptia
spec:
  ports:
  - name: https
    port: 8443
    protocol: TCP
    targetPort: https
  - name: http
    port: 8080
    protocol: TCP
    targetPort: http
  selector:
    calyptia.core: core-operator
    control-plane: controller-manager
---
# Source: calyptia-standalone/charts/monitoring-aggregator/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: calyptia-cloud-standalone-monitoring-aggregator
  namespace: calyptia
  labels:
    helm.sh/chart: monitoring-aggregator-0.39.0
    app.kubernetes.io/name: monitoring-aggregator
    app.kubernetes.io/instance: calyptia-cloud-standalone
    app.kubernetes.io/version: "2.1.10"
    app.kubernetes.io/managed-by: Helm
  annotations:
    metrics.dynatrace.com/path: /metrics
    metrics.dynatrace.com/port: "2021"
    metrics.dynatrace.com/scrape: "true"
    prometheus.io/path: /metrics
    prometheus.io/port: "2021"
    prometheus.io/scrape: "true"
spec:
  type: ClusterIP
  ports:
    - port: 2020
      targetPort: http
      protocol: TCP
      name: http
    - name: metrics
      targetPort: metrics
      protocol: TCP
      port: 2021
  selector:
    app.kubernetes.io/name: monitoring-aggregator
    app.kubernetes.io/instance: calyptia-cloud-standalone
---
# Source: calyptia-standalone/charts/monitoring-daemonset/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: calyptia-cloud-standalone-monitoring-daemonset
  namespace: calyptia
  labels:
    helm.sh/chart: monitoring-daemonset-0.39.0
    app.kubernetes.io/name: monitoring-daemonset
    app.kubernetes.io/instance: calyptia-cloud-standalone
    app.kubernetes.io/version: "2.1.10"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 2020
      targetPort: http
      protocol: TCP
      name: http
    - name: metrics
      targetPort: metrics
      protocol: TCP
      port: 2021
  selector:
    app.kubernetes.io/name: monitoring-daemonset
    app.kubernetes.io/instance: calyptia-cloud-standalone
---
# Source: calyptia-standalone/templates/cloud/service-cloud.yaml
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/path: "/prometheus_metrics"
    prometheus.io/port: "5000"
    # Set up Dynatrace scraping
    metrics.dynatrace.com/scrape: "true"
    metrics.dynatrace.com/path: "/prometheus_metrics"
    metrics.dynatrace.com/port: "5000"
  labels:
    app.kubernetes.io/name: calyptia-standalone
    helm.sh/chart: calyptia-standalone-1.0.2
    app.kubernetes.io/instance: calyptia-cloud-standalone
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "v1.5.8"
    app.kubernetes.io/component: cloud-api
  name: cloud-api
  namespace: "calyptia"
spec:
  type: LoadBalancer
  ports:
    - name: "cloud-api"
      port: 5000
      targetPort: 5000
  selector:
    app.kubernetes.io/name: calyptia-standalone
    helm.sh/chart: calyptia-standalone-1.0.2
    app.kubernetes.io/instance: calyptia-cloud-standalone
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "v1.5.8"
    app.kubernetes.io/component: cloud-api
---
# Source: calyptia-standalone/templates/cloud/service-influxdb.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: calyptia-standalone
    helm.sh/chart: calyptia-standalone-1.0.2
    app.kubernetes.io/instance: calyptia-cloud-standalone
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "v1.5.8"
    app.kubernetes.io/component: influxdb
  name: influxdb
  namespace: "calyptia"
spec:
  type: ClusterIP
  ports:
    - name: influxdb
      port: 8086
      targetPort: 8086
  selector:
    app.kubernetes.io/name: calyptia-standalone
    helm.sh/chart: calyptia-standalone-1.0.2
    app.kubernetes.io/instance: calyptia-cloud-standalone
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "v1.5.8"
    app.kubernetes.io/component: influxdb
---
# Source: calyptia-standalone/templates/cloud/service-postgres.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: calyptia-standalone
    helm.sh/chart: calyptia-standalone-1.0.2
    app.kubernetes.io/instance: calyptia-cloud-standalone
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "v1.5.8"
    app.kubernetes.io/component: postgres
  name: postgres
  namespace: "calyptia"
spec:
  type: ClusterIP
  ports:
    - name: postgres
      port: 5432
      targetPort: 5432
  selector:
    app.kubernetes.io/name: calyptia-standalone
    helm.sh/chart: calyptia-standalone-1.0.2
    app.kubernetes.io/instance: calyptia-cloud-standalone
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "v1.5.8"
    app.kubernetes.io/component: postgres
---
# Source: calyptia-standalone/templates/frontend/service-core-ui.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: calyptia-standalone
    helm.sh/chart: calyptia-standalone-1.0.2
    app.kubernetes.io/instance: calyptia-cloud-standalone
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "v1.5.8"
    app.kubernetes.io/component: core
  name: core
  namespace: "calyptia"
spec:
  type: LoadBalancer
  ports:
    - name: ui
      port: 3000
      targetPort: 3000
  selector:
    app.kubernetes.io/name: calyptia-standalone
    helm.sh/chart: calyptia-standalone-1.0.2
    app.kubernetes.io/instance: calyptia-cloud-standalone
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "v1.5.8"
    app.kubernetes.io/component: core
---
# Source: calyptia-standalone/templates/frontend/service-luasandbox.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: calyptia-standalone
    helm.sh/chart: calyptia-standalone-1.0.2
    app.kubernetes.io/instance: calyptia-cloud-standalone
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "v1.5.8"
    app.kubernetes.io/component: cloud-lua-sandbox
  name: cloud-lua-sandbox
  namespace: "calyptia"
spec:
  type: ClusterIP
  ports:
    - name: cloud-lua-sandbox
      port: 5555
      targetPort: 5555
  selector:
    app.kubernetes.io/name: calyptia-standalone
    helm.sh/chart: calyptia-standalone-1.0.2
    app.kubernetes.io/instance: calyptia-cloud-standalone
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "v1.5.8"
    app.kubernetes.io/component: cloud-lua-sandbox
---
# Source: calyptia-standalone/templates/reloader/sevice-reloader.yaml
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/path: "/metrics"
    prometheus.io/port: '9090'
    # Set up Dynatrace scraping
    metrics.dynatrace.com/scrape: "true"
    metrics.dynatrace.com/path: "/metrics"
    metrics.dynatrace.com/port: '9090'
  labels:
    app.kubernetes.io/name: calyptia-standalone
    helm.sh/chart: calyptia-standalone-1.0.2
    app.kubernetes.io/instance: calyptia-cloud-standalone
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "v1.5.8"
    app.kubernetes.io/component: reloader
  name: reloader
  namespace: "calyptia"
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 9090
      targetPort: 9090
  selector:
    app.kubernetes.io/name: calyptia-standalone
    helm.sh/chart: calyptia-standalone-1.0.2
    app.kubernetes.io/instance: calyptia-cloud-standalone
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "v1.5.8"
    app.kubernetes.io/component: reloader
---
# Source: calyptia-standalone/templates/vivo/service-vivo.yaml
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/path: "/api/v2/metrics/prometheus"
    prometheus.io/port: '2020'
    # Set up Dynatrace scraping
    metrics.dynatrace.com/scrape: "true"
    metrics.dynatrace.com/path: "/api/v2/metrics/prometheus"
    metrics.dynatrace.com/port: '2020'
  labels:
    app.kubernetes.io/name: calyptia-standalone
    helm.sh/chart: calyptia-standalone-1.0.2
    app.kubernetes.io/instance: calyptia-cloud-standalone
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "v1.5.8"
    app.kubernetes.io/component: vivo
    calyptia.vivo.input.http: '9010'
    calyptia.vivo.input.forward: '9000'
  name: vivo
  namespace: "calyptia"
spec:
  type: LoadBalancer
  ports:
    - name: "ui"
      port: 3000
      targetPort: 3000
    - name: "forward"
      port: 9000
      targetPort: 24224
    - name: "http"
      port: 9010
      targetPort: 9880
    - name: "vivo"
      port: 2025
      targetPort: 2025
    - name: "fluent-bit"
      port: 2020
      targetPort: 2020
  selector:
    app.kubernetes.io/name: calyptia-standalone
    helm.sh/chart: calyptia-standalone-1.0.2
    app.kubernetes.io/instance: calyptia-cloud-standalone
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "v1.5.8"
    app.kubernetes.io/component: vivo
---
# Source: calyptia-standalone/charts/monitoring-daemonset/templates/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: calyptia-cloud-standalone-monitoring-daemonset
  namespace: calyptia
  labels:
    helm.sh/chart: monitoring-daemonset-0.39.0
    app.kubernetes.io/name: monitoring-daemonset
    app.kubernetes.io/instance: calyptia-cloud-standalone
    app.kubernetes.io/version: "2.1.10"
    app.kubernetes.io/managed-by: Helm
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: monitoring-daemonset
      app.kubernetes.io/instance: calyptia-cloud-standalone
  template:
    metadata:
      labels:
        app.kubernetes.io/name: monitoring-daemonset
        app.kubernetes.io/instance: calyptia-cloud-standalone
      annotations:
        checksum/config: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        fluentbit.io/exclude: "true"
        metrics.dynatrace.com/path: /metrics
        metrics.dynatrace.com/port: "2021"
        metrics.dynatrace.com/scrape: "true"
        prometheus.io/path: /metrics
        prometheus.io/port: "2021"
        prometheus.io/scrape: "true"
    spec:
      serviceAccountName: calyptia-cloud-standalone-monitoring-daemonset
      hostNetwork: false
      dnsPolicy: ClusterFirst
      containers:
        - name: monitoring-daemonset
          securityContext:
            runAsNonRoot: false
            runAsUser: 0
          image: "ghcr.io/calyptia/core/calyptia-fluent-bit:23.10.2"
          imagePullPolicy: IfNotPresent
          env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          command:
            - /fluent-bit/bin/fluent-bit
          args:
            - --workdir=/fluent-bit/etc
            - --config=/fluent-bit/etc/conf/fluent-bit.conf
          ports:
            - name: http
              containerPort: 2020
              protocol: TCP
            - name: metrics
              containerPort: 2021
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /api/v1/health
              port: http
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 128Mi
          volumeMounts:
            - name: config
              mountPath: /fluent-bit/etc/conf
            - mountPath: /var/log/
              name: varlog
              readOnly: true
            - mountPath: /var/lib/docker/containers
              name: varlibdockercontainers
              readOnly: true
            - mountPath: /etc/machine-id
              name: etcmachineid
              readOnly: true
            - mountPath: /host/proc
              name: hostproc
              readOnly: true
            - mountPath: /host/sys
              name: hostsys
              readOnly: true
      volumes:
        - name: config
          configMap:
            name: monitoring-daemonset
        - hostPath:
            path: /var/log/
          name: varlog
        - hostPath:
            path: /var/lib/docker/containers
          name: varlibdockercontainers
        - hostPath:
            path: /etc/machine-id
            type: File
          name: etcmachineid
        - hostPath:
            path: /proc
          name: hostproc
        - hostPath:
            path: /sys
          name: hostsys
---
# Source: calyptia-standalone/charts/core-operator/templates/manager.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
  #
    app.kubernetes.io/name: core-operator
    helm.sh/chart: core-operator-1.0.2
    app.kubernetes.io/instance: calyptia-cloud-standalone
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "v2.0.6"
    app.kubernetes.io/component: manager
    app.kubernetes.io/created-by: operator
    calyptia.core: core-operator
    control-plane: controller-manager
  name: calyptia-core-controller-manager
  namespace: "calyptia"
spec:
  replicas: 1
  selector:
    matchLabels:
      calyptia.core: core-operator
      control-plane: controller-manager
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
      labels:
      #
        app.kubernetes.io/name: core-operator
        helm.sh/chart: core-operator-1.0.2
        app.kubernetes.io/instance: calyptia-cloud-standalone
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: "v2.0.6"
      #
      #
        calyptia.core: core-operator
        control-plane: controller-manager
    spec:
      containers:
        - command:
            - /manager
          image: ghcr.io/calyptia/core-operator:2.0.15
          imagePullPolicy: "IfNotPresent"
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8081
            initialDelaySeconds: 15
            periodSeconds: 20
          name: manager
          ports:
            - containerPort: 8443
              name: https
            - containerPort: 8080
              name: http
          readinessProbe:
            httpGet:
              path: /readyz
              port: 8081
            initialDelaySeconds: 5
            periodSeconds: 10
          resources:
            limits:
              cpu: 500m
              memory: 128Mi
            requests:
              cpu: 10m
              memory: 64Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
      securityContext:
        runAsNonRoot: true
      serviceAccount: calyptia-cloud-standalone-core-operator-calyptia-core-operator
      
      imagePullSecrets:
        - name: regcreds
      terminationGracePeriodSeconds: 10
---
# Source: calyptia-standalone/charts/monitoring-aggregator/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: calyptia-cloud-standalone-monitoring-aggregator
  namespace: calyptia
  labels:
    helm.sh/chart: monitoring-aggregator-0.39.0
    app.kubernetes.io/name: monitoring-aggregator
    app.kubernetes.io/instance: calyptia-cloud-standalone
    app.kubernetes.io/version: "2.1.10"
    app.kubernetes.io/managed-by: Helm
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: monitoring-aggregator
      app.kubernetes.io/instance: calyptia-cloud-standalone
  template:
    metadata:
      labels:
        app.kubernetes.io/name: monitoring-aggregator
        app.kubernetes.io/instance: calyptia-cloud-standalone
      annotations:
        checksum/config: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
    spec:
      serviceAccountName: calyptia-cloud-standalone-monitoring-aggregator
      hostNetwork: false
      dnsPolicy: ClusterFirst
      containers:
        - name: monitoring-aggregator
          image: "ghcr.io/calyptia/core/calyptia-fluent-bit:23.10.2"
          imagePullPolicy: IfNotPresent
          command:
            - /fluent-bit/bin/fluent-bit
          args:
            - --workdir=/fluent-bit/etc
            - --config=/fluent-bit/etc/conf/fluent-bit.conf
          ports:
            - name: http
              containerPort: 2020
              protocol: TCP
            - name: metrics
              containerPort: 2021
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /api/v1/health
              port: http
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 128Mi
          volumeMounts:
            - name: config
              mountPath: /fluent-bit/etc/conf
      volumes:
        - name: config
          configMap:
            name: monitoring-aggregator
---
# Source: calyptia-standalone/templates/cloud/deployment-cloud.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kubectl.kubernetes.io/default-container: cloud-api
  labels:
    app.kubernetes.io/name: calyptia-standalone
    helm.sh/chart: calyptia-standalone-1.0.2
    app.kubernetes.io/instance: calyptia-cloud-standalone
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "v1.5.8"
    app.kubernetes.io/component: cloud-api
  name: cloud-api
  namespace: "calyptia"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: calyptia-standalone
      app.kubernetes.io/instance: calyptia-cloud-standalone
      app.kubernetes.io/component: cloud-api
  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/name: calyptia-standalone
        helm.sh/chart: calyptia-standalone-1.0.2
        app.kubernetes.io/instance: calyptia-cloud-standalone
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: "v1.5.8"
        app.kubernetes.io/component: cloud-api
    spec:
      serviceAccount: calyptia-cloud-standalone-calyptia-standalone-cloud
      
      imagePullSecrets:
        - name: regcreds
      containers:
        - image: ghcr.io/calyptia/cloud:1.5.8
          imagePullPolicy: "IfNotPresent"
          name: cloud-api
          ports:
            - name: http
              containerPort: 5000
          resources:
            limits:
              cpu: 500m
              memory: 500Mi
            requests: {}
          env:
            - name: DEBUG
              value: 'true'
            - name: INFLUX_SERVER
              value: "http://influxdb:8086"
            - name: POSTGRES_DSN
              value: "postgresql://postgres@postgres:5432?sslmode=disable"
            # - name: ALLOWED_ORIGINS
            #   # value: "https://config-viewer-ui-dev.herokuapp.com,https://visual-ui.herokuapp.com,https://cloud-api.calyptia.com,https://core-jet.vercel.app,https://core-git-*-calyptia.vercel.app"
            #   value: "*"
            # Cross-mount a token file
            - name: DEFAULT_TOKEN_FILE
              value: /token/token.txt
          volumeMounts:
            - mountPath: /token
              name: token
          startupProbe:
            failureThreshold: 30
            httpGet:
              path: /
              port: http
            periodSeconds: 10
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: http
            periodSeconds: 60
          livenessProbe:
            failureThreshold: 7
            httpGet:
              path: /
              port: http
            periodSeconds: 60
        - name: token-secret-creator
          image: docker.io/bitnami/kubectl:1.25.12
          imagePullPolicy: "IfNotPresent"
          # Need access to the filesystem - cloud runs as root
          securityContext:
            runAsUser: 0
          resources:
            limits: {}
            requests: {}
          command: ["/bin/bash"]
          args:
            - "-c"
            - |
              if kubectl delete -n ${CORE_NAMESPACE} secret auth-secret ; then
                echo 'Deleted existing token'
              fi
              until [[ -f /token/token.txt ]]; do
                sleep 5
              done
              echo 'Token file found'
              until kubectl create -n ${CORE_NAMESPACE} secret generic auth-secret --from-file=ONPREM_CLOUD_API_PROJECT_TOKEN=/token/token.txt ; do
                sleep 5
              done
              echo 'Secret created - complete'
              while true; do
                sleep 5
              done
          env:
            - name: CORE_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          volumeMounts:
            - name: token
              mountPath: /token
      volumes:
        - name: token
          emptyDir:
            sizeLimit: 1Mi
      restartPolicy: Always
---
# Source: calyptia-standalone/templates/cloud/deployment-influxdb.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: calyptia-standalone
    helm.sh/chart: calyptia-standalone-1.0.2
    app.kubernetes.io/instance: calyptia-cloud-standalone
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "v1.5.8"
    app.kubernetes.io/component: influxdb
  name: influxdb
  namespace: "calyptia"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: calyptia-standalone
      app.kubernetes.io/instance: calyptia-cloud-standalone
      app.kubernetes.io/component: influxdb
  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/name: calyptia-standalone
        helm.sh/chart: calyptia-standalone-1.0.2
        app.kubernetes.io/instance: calyptia-cloud-standalone
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: "v1.5.8"
        app.kubernetes.io/component: influxdb
    spec:
      
      imagePullSecrets:
        - name: regcreds
      containers:
        - env:
            - name: DOCKER_INFLUXDB_INIT_ADMIN_TOKEN
              value: cloud-api
            - name: DOCKER_INFLUXDB_INIT_BUCKET
              value: cloud-api
            - name: DOCKER_INFLUXDB_INIT_MODE
              value: setup
            - name: DOCKER_INFLUXDB_INIT_ORG
              value: cloud-api
            - name: DOCKER_INFLUXDB_INIT_PASSWORD
              value: my-password
            - name: DOCKER_INFLUXDB_INIT_USERNAME
              value: my-user
          image: docker.io/influxdb:2.7.1
          imagePullPolicy: "IfNotPresent"
          name: influxdb
          ports:
            - containerPort: 8086
          resources:
            limits:
              cpu: 500m
              memory: 500Mi
            requests: {}
          volumeMounts:
      volumes:
      restartPolicy: Always
---
# Source: calyptia-standalone/templates/cloud/deployment-postgres.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: calyptia-standalone
    helm.sh/chart: calyptia-standalone-1.0.2
    app.kubernetes.io/instance: calyptia-cloud-standalone
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "v1.5.8"
    app.kubernetes.io/component: postgres
  name: postgres
  namespace: "calyptia"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: calyptia-standalone
      app.kubernetes.io/instance: calyptia-cloud-standalone
      app.kubernetes.io/component: postgres
  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/name: calyptia-standalone
        helm.sh/chart: calyptia-standalone-1.0.2
        app.kubernetes.io/instance: calyptia-cloud-standalone
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: "v1.5.8"
        app.kubernetes.io/component: postgres
    spec:
      
      imagePullSecrets:
        - name: regcreds
      containers:
        - env:
            - name: POSTGRES_HOST_AUTH_METHOD
              value: trust
          image: docker.io/postgres:15.3
          imagePullPolicy: "IfNotPresent"
          name: postgres
          ports:
            - containerPort: 5432
          resources:
            limits:
              cpu: 500m
              memory: 500Mi
            requests: {}
          volumeMounts:
      volumes:
      restartPolicy: Always
---
# Source: calyptia-standalone/templates/frontend/deployment-core-ui.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    reloader.stakater.com/auto: "true"
  labels:
    app.kubernetes.io/name: calyptia-standalone
    helm.sh/chart: calyptia-standalone-1.0.2
    app.kubernetes.io/instance: calyptia-cloud-standalone
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "v1.5.8"
    app.kubernetes.io/component: core
  name: core
  namespace: "calyptia"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: calyptia-standalone
      app.kubernetes.io/instance: calyptia-cloud-standalone
      app.kubernetes.io/component: core
  template:
    metadata:
      labels:
        app.kubernetes.io/name: calyptia-standalone
        helm.sh/chart: calyptia-standalone-1.0.2
        app.kubernetes.io/instance: calyptia-cloud-standalone
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: "v1.5.8"
        app.kubernetes.io/component: core
    spec:
      serviceAccount: calyptia-cloud-standalone-calyptia-standalone-frontend
      
      imagePullSecrets:
        - name: regcreds
      initContainers:
        # Wait for the auth-secret to be created before continuing
        - name: token-secret-waiter
          image: docker.io/bitnami/kubectl:1.25.12
          imagePullPolicy: "IfNotPresent"
          resources:
            limits: {}
            requests: {}
          command: ["/bin/bash"]
          args:
            - "-c"
            - |
              until kubectl get secret -n ${CORE_NAMESPACE} auth-secret; do
                sleep 30
              done
          env:
            - name: CORE_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
      containers:
        - image: ghcr.io/calyptia/frontend:1.3.0
          imagePullPolicy: "IfNotPresent"
          name: core
          ports:
            - name: http
              containerPort: 3000
          env:
            # The in-cluster 'cloud' service
            - name: CLOUD_API_URL
              value: http://cloud-api:5000
            - name: NEXT_PUBLIC_CLI_INSTRUCTIONS_URL_OVERRIDE
              value: http://cloud-api:5000
              # The in-cluster LUA sandbox service
            - name: LUA_SANDBOX_URL
              value: http://cloud-lua-sandbox:5555/jsonrpc
            # Disable various components we do not want - the container should anyway.
            - name: SENTRY_IGNORE_API_RESOLUTION_ERROR
              value: '1'
            - name: SENTRY_ENVIRONMENT
              value: 'offline'
            - name: SENTRY_DISABLED
              value: '1'
            - name: NEXT_TELEMETRY_DISABLED
              value: '1'
          envFrom:
            - secretRef:
                name: auth-secret
          resources:
            limits:
              cpu: 500m
              memory: 500Mi
            requests: {}
          volumeMounts:
          startupProbe:
            failureThreshold: 30
            httpGet:
              path: /
              port: http
            periodSeconds: 10
          readinessProbe:
            failureThreshold: 10
            httpGet:
              path: /
              port: http
            periodSeconds: 60
          livenessProbe:
            failureThreshold: 30
            httpGet:
              path: /
              port: http
            periodSeconds: 60
      volumes:
      restartPolicy: Always
---
# Source: calyptia-standalone/templates/frontend/deployment-luasandbox.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: calyptia-standalone
    helm.sh/chart: calyptia-standalone-1.0.2
    app.kubernetes.io/instance: calyptia-cloud-standalone
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "v1.5.8"
    app.kubernetes.io/component: cloud-lua-sandbox
  name: cloud-lua-sandbox
  namespace: "calyptia"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: calyptia-standalone
      app.kubernetes.io/instance: calyptia-cloud-standalone
      app.kubernetes.io/component: cloud-lua-sandbox
  template:
    metadata:
      labels:
        app.kubernetes.io/name: calyptia-standalone
        helm.sh/chart: calyptia-standalone-1.0.2
        app.kubernetes.io/instance: calyptia-cloud-standalone
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: "v1.5.8"
        app.kubernetes.io/component: cloud-lua-sandbox
    spec:
      
      imagePullSecrets:
        - name: regcreds
      containers:
        - image: ghcr.io/calyptia/cloud-lua-sandbox:2.2.0
          name: cloud-lua-sandbox
          ports:
            - name: http
              containerPort: 5555
          resources:
            limits:
              cpu: 500m
              memory: 500Mi
            requests: {}
          imagePullPolicy: "IfNotPresent"
      restartPolicy: Always
---
# Source: calyptia-standalone/templates/reloader/deployment-reloader.yaml
# https://github.com/stakater/Reloader/blob/master/deployments/kubernetes/manifests/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: calyptia-standalone
    helm.sh/chart: calyptia-standalone-1.0.2
    app.kubernetes.io/instance: calyptia-cloud-standalone
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "v1.5.8"
    app.kubernetes.io/component: reloader
  name: reloader
  namespace: "calyptia"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: calyptia-standalone
      app.kubernetes.io/instance: calyptia-cloud-standalone
      app.kubernetes.io/component: reloader
  template:
    metadata:
      labels:
        app.kubernetes.io/name: calyptia-standalone
        helm.sh/chart: calyptia-standalone-1.0.2
        app.kubernetes.io/instance: calyptia-cloud-standalone
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: "v1.5.8"
        app.kubernetes.io/component: reloader
    spec:
      
      imagePullSecrets:
        - name: regcreds
      containers:
        - image: ghcr.io/calyptia/reloader:1.0.41
          name: reloader
          ports:
            - name: http
              containerPort: 9090
          resources:
            limits: {}
            requests: {}
          imagePullPolicy: "IfNotPresent"
          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: /metrics
              port: http
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /live
              port: http
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          env:
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          args:
          - "--reload-on-create=true"
          - "--sync-after-restart=true"
      restartPolicy: Always
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
      serviceAccountName: calyptia-cloud-standalone-calyptia-standalone-reloader
---
# Source: calyptia-standalone/templates/vivo/deployment-vivo.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: calyptia-standalone
    helm.sh/chart: calyptia-standalone-1.0.2
    app.kubernetes.io/instance: calyptia-cloud-standalone
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "v1.5.8"
    app.kubernetes.io/component: vivo
  name: vivo
  namespace: "calyptia"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: calyptia-standalone
      app.kubernetes.io/instance: calyptia-cloud-standalone
      app.kubernetes.io/component: vivo
  template:
    metadata:
      labels:
        app.kubernetes.io/name: calyptia-standalone
        helm.sh/chart: calyptia-standalone-1.0.2
        app.kubernetes.io/instance: calyptia-cloud-standalone
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: "v1.5.8"
        app.kubernetes.io/component: vivo
    spec:
      
      imagePullSecrets:
        - name: regcreds
      containers:
        - image: docker.io/calyptia/vivo:3.0.1
          name: vivo
          ports:
            - name: forward
              containerPort: 24224
            - name: http
              containerPort: 9880
            - name: vivo
              containerPort: 2025
            - name: fluent-bit
              containerPort: 2020
            - name: ui
              containerPort: 3000
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /api/v1/health
              port: fluent-bit
            periodSeconds: 5
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /api/v1/health
              port: fluent-bit
            periodSeconds: 5
          resources:
            limits:
              cpu: 500m
              memory: 128Mi
            requests:
              cpu: 250m
              memory: 64Mi
          imagePullPolicy: "IfNotPresent"
      restartPolicy: Always
---
# Source: calyptia-standalone/charts/monitoring-aggregator/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "calyptia-cloud-standalone-monitoring-aggregator-test-connection"
  namespace: calyptia
  labels:
    helm.sh/chart: monitoring-aggregator-0.39.0
    app.kubernetes.io/name: monitoring-aggregator
    app.kubernetes.io/instance: calyptia-cloud-standalone
    app.kubernetes.io/version: "2.1.10"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: "busybox:latest"
      imagePullPolicy: Always
      command: ['wget']
      args: ['calyptia-cloud-standalone-monitoring-aggregator:2020']
  restartPolicy: Never
---
# Source: calyptia-standalone/charts/monitoring-daemonset/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "calyptia-cloud-standalone-monitoring-daemonset-test-connection"
  namespace: calyptia
  labels:
    helm.sh/chart: monitoring-daemonset-0.39.0
    app.kubernetes.io/name: monitoring-daemonset
    app.kubernetes.io/instance: calyptia-cloud-standalone
    app.kubernetes.io/version: "2.1.10"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: "busybox:latest"
      imagePullPolicy: Always
      command: ['wget']
      args: ['calyptia-cloud-standalone-monitoring-daemonset:2020']
  restartPolicy: Never
