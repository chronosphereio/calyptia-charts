apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.1
  creationTimestamp: null
  labels:
    calyptia.core: core-operator
  name: pipelines.core.calyptia.com
spec:
  group: core.calyptia.com
  names:
    kind: Pipeline
    listKind: PipelineList
    plural: pipelines
    singular: pipeline
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - description: Status of the pipeline
      jsonPath: .status.status
      name: Status
      type: string
    name: v1
    schema:
      openAPIV3Schema:
        description: Pipeline is the Schema for the pipelines API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: PipelineSpec defines the desired state of Pipeline
            properties:
              cloudResourceID:
                description: CloudResourceID represents the ID under which pipeline
                  exists in Cloud API
                type: string
              envVar:
                items:
                  description: EnvVar represents an environment variable present in
                    a Container.
                  properties:
                    name:
                      description: Name of the environment variable. Must be a C_IDENTIFIER.
                      type: string
                    value:
                      description: 'Variable references $(VAR_NAME) are expanded using
                        the previously defined environment variables in the container
                        and any service environment variables. If a variable cannot
                        be resolved, the reference in the input string will be unchanged.
                        Double $$ are reduced to a single $, which allows for escaping
                        the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the
                        string literal "$(VAR_NAME)". Escaped references will never
                        be expanded, regardless of whether the variable exists or
                        not. Defaults to "".'
                      type: string
                    valueFrom:
                      description: Source for the environment variable's value. Cannot
                        be used if value is not empty.
                      properties:
                        configMapKeyRef:
                          description: Selects a key of a ConfigMap.
                          properties:
                            key:
                              description: The key to select.
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                TODO: Add other useful fields. apiVersion, kind, uid?'
                              type: string
                            optional:
                              description: Specify whether the ConfigMap or its key
                                must be defined
                              type: boolean
                          required:
                          - key
                          type: object
                          x-kubernetes-map-type: atomic
                        fieldRef:
                          description: 'Selects a field of the pod: supports metadata.name,
                            metadata.namespace, `metadata.labels[''<KEY>'']`, `metadata.annotations[''<KEY>'']`,
                            spec.nodeName, spec.serviceAccountName, status.hostIP,
                            status.podIP, status.podIPs.'
                          properties:
                            apiVersion:
                              description: Version of the schema the FieldPath is
                                written in terms of, defaults to "v1".
                              type: string
                            fieldPath:
                              description: Path of the field to select in the specified
                                API version.
                              type: string
                          required:
                          - fieldPath
                          type: object
                          x-kubernetes-map-type: atomic
                        resourceFieldRef:
                          description: 'Selects a resource of the container: only
                            resources limits and requests (limits.cpu, limits.memory,
                            limits.ephemeral-storage, requests.cpu, requests.memory
                            and requests.ephemeral-storage) are currently supported.'
                          properties:
                            containerName:
                              description: 'Container name: required for volumes,
                                optional for env vars'
                              type: string
                            divisor:
                              anyOf:
                              - type: integer
                              - type: string
                              description: Specifies the output format of the exposed
                                resources, defaults to "1"
                              pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              x-kubernetes-int-or-string: true
                            resource:
                              description: 'Required: resource to select'
                              type: string
                          required:
                          - resource
                          type: object
                          x-kubernetes-map-type: atomic
                        secretKeyRef:
                          description: Selects a key of a secret in the pod's namespace
                          properties:
                            key:
                              description: The key of the secret to select from.  Must
                                be a valid secret key.
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                TODO: Add other useful fields. apiVersion, kind, uid?'
                              type: string
                            optional:
                              description: Specify whether the Secret or its key must
                                be defined
                              type: boolean
                          required:
                          - key
                          type: object
                          x-kubernetes-map-type: atomic
                      type: object
                  required:
                  - name
                  type: object
                type: array
              fluentbit:
                properties:
                  config:
                    type: string
                  files:
                    items:
                      properties:
                        content:
                          type: string
                        name:
                          type: string
                      type: object
                    type: array
                  parsers:
                    type: string
                  secrets:
                    items:
                      properties:
                        key:
                          type: string
                        name:
                          type: string
                      type: object
                    type: array
                type: object
              hotReload:
                type: boolean
              hotReloadImage:
                default: ghcr.io/calyptia/configmap-reload:v0.11.1
                type: string
              image:
                default: ghcr.io/calyptia/core/calyptia-fluent-bit:23.10.2
                type: string
              kind:
                description: Enums
                type: string
              ports:
                items:
                  properties:
                    backendPort:
                      type: integer
                    cloudResourceID:
                      description: CloudResourceID represents the ID under which pipeline
                        port exists in Cloud API
                      type: string
                    frontendPort:
                      type: integer
                    port:
                      format: int32
                      type: integer
                    protocol:
                      type: string
                  type: object
                type: array
              replicasCount:
                format: int32
                type: integer
              resources:
                description: ResourceProfile model.
                properties:
                  limits:
                    properties:
                      cpu:
                        type: string
                      memory:
                        type: string
                    type: object
                  requests:
                    properties:
                      cpu:
                        type: string
                      memory:
                        type: string
                      storage:
                        properties:
                          backlog-mem-limit:
                            type: string
                          max-chunks-pause:
                            type: boolean
                          max-chunks-up:
                            type: integer
                          sync-full:
                            type: boolean
                          volume-size:
                            default: 256Mi
                            type: string
                        type: object
                    type: object
                type: object
            required:
            - kind
            - replicasCount
            type: object
          status:
            description: PipelineStatus defines the observed state of Pipeline
            properties:
              daemonsetstatus:
                description: DaemonSetStatus represents the current status of a daemon
                  set.
                properties:
                  collisionCount:
                    description: Count of hash collisions for the DaemonSet. The DaemonSet
                      controller uses this field as a collision avoidance mechanism
                      when it needs to create the name for the newest ControllerRevision.
                    format: int32
                    type: integer
                  conditions:
                    description: Represents the latest available observations of a
                      DaemonSet's current state.
                    items:
                      description: DaemonSetCondition describes the state of a DaemonSet
                        at a certain point.
                      properties:
                        lastTransitionTime:
                          description: Last time the condition transitioned from one
                            status to another.
                          format: date-time
                          type: string
                        message:
                          description: A human readable message indicating details
                            about the transition.
                          type: string
                        reason:
                          description: The reason for the condition's last transition.
                          type: string
                        status:
                          description: Status of the condition, one of True, False,
                            Unknown.
                          type: string
                        type:
                          description: Type of DaemonSet condition.
                          type: string
                      required:
                      - status
                      - type
                      type: object
                    type: array
                  currentNumberScheduled:
                    description: 'The number of nodes that are running at least 1
                      daemon pod and are supposed to run the daemon pod. More info:
                      https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/'
                    format: int32
                    type: integer
                  desiredNumberScheduled:
                    description: 'The total number of nodes that should be running
                      the daemon pod (including nodes correctly running the daemon
                      pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/'
                    format: int32
                    type: integer
                  numberAvailable:
                    description: The number of nodes that should be running the daemon
                      pod and have one or more of the daemon pod running and available
                      (ready for at least spec.minReadySeconds)
                    format: int32
                    type: integer
                  numberMisscheduled:
                    description: 'The number of nodes that are running the daemon
                      pod, but are not supposed to run the daemon pod. More info:
                      https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/'
                    format: int32
                    type: integer
                  numberReady:
                    description: numberReady is the number of nodes that should be
                      running the daemon pod and have one or more of the daemon pod
                      running with a Ready Condition.
                    format: int32
                    type: integer
                  numberUnavailable:
                    description: The number of nodes that should be running the daemon
                      pod and have none of the daemon pod running and available (ready
                      for at least spec.minReadySeconds)
                    format: int32
                    type: integer
                  observedGeneration:
                    description: The most recent generation observed by the daemon
                      set controller.
                    format: int64
                    type: integer
                  updatedNumberScheduled:
                    description: The total number of nodes that are running updated
                      daemon pod
                    format: int32
                    type: integer
                required:
                - currentNumberScheduled
                - desiredNumberScheduled
                - numberMisscheduled
                - numberReady
                type: object
              deploymentstatus:
                description: DeploymentStatus is the most recently observed status
                  of the Deployment.
                properties:
                  availableReplicas:
                    description: Total number of available pods (ready for at least
                      minReadySeconds) targeted by this deployment.
                    format: int32
                    type: integer
                  collisionCount:
                    description: Count of hash collisions for the Deployment. The
                      Deployment controller uses this field as a collision avoidance
                      mechanism when it needs to create the name for the newest ReplicaSet.
                    format: int32
                    type: integer
                  conditions:
                    description: Represents the latest available observations of a
                      deployment's current state.
                    items:
                      description: DeploymentCondition describes the state of a deployment
                        at a certain point.
                      properties:
                        lastTransitionTime:
                          description: Last time the condition transitioned from one
                            status to another.
                          format: date-time
                          type: string
                        lastUpdateTime:
                          description: The last time this condition was updated.
                          format: date-time
                          type: string
                        message:
                          description: A human readable message indicating details
                            about the transition.
                          type: string
                        reason:
                          description: The reason for the condition's last transition.
                          type: string
                        status:
                          description: Status of the condition, one of True, False,
                            Unknown.
                          type: string
                        type:
                          description: Type of deployment condition.
                          type: string
                      required:
                      - status
                      - type
                      type: object
                    type: array
                  observedGeneration:
                    description: The generation observed by the deployment controller.
                    format: int64
                    type: integer
                  readyReplicas:
                    description: readyReplicas is the number of pods targeted by this
                      Deployment with a Ready Condition.
                    format: int32
                    type: integer
                  replicas:
                    description: Total number of non-terminated pods targeted by this
                      deployment (their labels match the selector).
                    format: int32
                    type: integer
                  unavailableReplicas:
                    description: Total number of unavailable pods targeted by this
                      deployment. This is the total number of pods that are still
                      required for the deployment to have 100% available capacity.
                      They may either be pods that are running but not yet available
                      or pods that still have not been created.
                    format: int32
                    type: integer
                  updatedReplicas:
                    description: Total number of non-terminated pods targeted by this
                      deployment that have the desired template spec.
                    format: int32
                    type: integer
                type: object
              servicestatuses:
                additionalProperties:
                  description: ServiceStatus represents the current status of a service.
                  properties:
                    conditions:
                      description: Current service state
                      items:
                        description: "Condition contains details for one aspect of
                          the current state of this API Resource. --- This struct
                          is intended for direct use as an array at the field path
                          .status.conditions.  For example, \n type FooStatus struct{
                          // Represents the observations of a foo's current state.
                          // Known .status.conditions.type are: \"Available\", \"Progressing\",
                          and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge
                          // +listType=map // +listMapKey=type Conditions []metav1.Condition
                          `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\"
                          protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields
                          }"
                        properties:
                          lastTransitionTime:
                            description: lastTransitionTime is the last time the condition
                              transitioned from one status to another. This should
                              be when the underlying condition changed.  If that is
                              not known, then using the time when the API field changed
                              is acceptable.
                            format: date-time
                            type: string
                          message:
                            description: message is a human readable message indicating
                              details about the transition. This may be an empty string.
                            maxLength: 32768
                            type: string
                          observedGeneration:
                            description: observedGeneration represents the .metadata.generation
                              that the condition was set based upon. For instance,
                              if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration
                              is 9, the condition is out of date with respect to the
                              current state of the instance.
                            format: int64
                            minimum: 0
                            type: integer
                          reason:
                            description: reason contains a programmatic identifier
                              indicating the reason for the condition's last transition.
                              Producers of specific condition types may define expected
                              values and meanings for this field, and whether the
                              values are considered a guaranteed API. The value should
                              be a CamelCase string. This field may not be empty.
                            maxLength: 1024
                            minLength: 1
                            pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                            type: string
                          status:
                            description: status of the condition, one of True, False,
                              Unknown.
                            enum:
                            - "True"
                            - "False"
                            - Unknown
                            type: string
                          type:
                            description: type of condition in CamelCase or in foo.example.com/CamelCase.
                              --- Many .condition.type values are consistent across
                              resources like Available, but because arbitrary conditions
                              can be useful (see .node.status.conditions), the ability
                              to deconflict is important. The regex it matches is
                              (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                            maxLength: 316
                            pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                            type: string
                        required:
                        - lastTransitionTime
                        - message
                        - reason
                        - status
                        - type
                        type: object
                      type: array
                      x-kubernetes-list-map-keys:
                      - type
                      x-kubernetes-list-type: map
                    loadBalancer:
                      description: LoadBalancer contains the current status of the
                        load-balancer, if one is present.
                      properties:
                        ingress:
                          description: Ingress is a list containing ingress points
                            for the load-balancer. Traffic intended for the service
                            should be sent to these ingress points.
                          items:
                            description: 'LoadBalancerIngress represents the status
                              of a load-balancer ingress point: traffic intended for
                              the service should be sent to an ingress point.'
                            properties:
                              hostname:
                                description: Hostname is set for load-balancer ingress
                                  points that are DNS based (typically AWS load-balancers)
                                type: string
                              ip:
                                description: IP is set for load-balancer ingress points
                                  that are IP based (typically GCE or OpenStack load-balancers)
                                type: string
                              ports:
                                description: Ports is a list of records of service
                                  ports If used, every port defined in the service
                                  should have an entry in it
                                items:
                                  properties:
                                    error:
                                      description: 'Error is to record the problem
                                        with the service port The format of the error
                                        shall comply with the following rules: - built-in
                                        error values shall be specified in this file
                                        and those shall use CamelCase names - cloud
                                        provider specific error values must have names
                                        that comply with the format foo.example.com/CamelCase.
                                        --- The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)'
                                      maxLength: 316
                                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                                      type: string
                                    port:
                                      description: Port is the port number of the
                                        service port of which status is recorded here
                                      format: int32
                                      type: integer
                                    protocol:
                                      default: TCP
                                      description: 'Protocol is the protocol of the
                                        service port of which status is recorded here
                                        The supported values are: "TCP", "UDP", "SCTP"'
                                      type: string
                                  required:
                                  - port
                                  - protocol
                                  type: object
                                type: array
                                x-kubernetes-list-type: atomic
                            type: object
                          type: array
                      type: object
                  type: object
                type: object
              status:
                description: PipelineStatusKind enum.
                type: string
            required:
            - status
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
